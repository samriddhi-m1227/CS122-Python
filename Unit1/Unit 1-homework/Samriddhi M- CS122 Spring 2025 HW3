{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NbaZGYi9es2vtr5sHoktF7hsxy-caf03","timestamp":1740102162849}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Simple Banking System\n","\n","\n","Account Types:\n","The system should support two types of bank accounts:\n","* \"SavingAccount\" class : A savings account that charges a \\$1 fee for every withdrawal.\n","* \"CheckingAccount\" class : A checking account that charges a \\$2 fee for every withdrawal.\n","* Both \"Saving Account\" and \"CheckingAccount\" classes inhert \"BankAccount\" class.\n","\n","\n","Account Operations in \"BankAccount\" class:\n","* Create an Account: A user can create a new account by specifying their name and choosing either a SavingAccount or a CheckingAccount.\n","\n","* Deposit Money: A user can deposit money into their account.\n","\n","* Withdraw Money: A user can withdraw money from their account, but it should check if the account has enough balance to cover the withdrawal amount plus the withdrawal fee. If not, it should print an error message.\n","\n","* Check Balance: A user can check the current balance of their account.\n","\n","* Saving and Checking account classes should overwrite the Withdraw Money method to handle them differently with \\$1 and \\$2 fees respectively.\n","\n","* A \\_\\_str\\_\\_ method to return string representation of the account owner and balance.\n","\n","\n","\n","File I/O:\n","\n","* The system should support saving and loading account data to Shelve. When the program starts, it should load any previously saved accounts and their balances. After any operations, the system should save the account data in a shelve file.\n","* Assume that all customer have unique names.\n","\n","\n","Exception Handling:\n","* Write custom exception handler classes, which inherit from Exception class.\n","\n","* The program must handle negative amounts for deposit or withdrawal and provide proper error messages.\n","\n","* When attempting to withdraw more than the available balance, an error should be raised indicating insufficient funds.\n","\n","\n","\n","# Implement your code in the code box below.\n","\n","Grading criteria:\n","* Class implementation and inheritance implemented correctly. 25 points\n","* Account operations correctly implemented. 25 points\n","* File I/O correctly implemented. 25 points\n","* Exeption handling correctly implemented for . 25 points."],"metadata":{"id":"frm4Dha99lEc"}},{"cell_type":"code","source":["# imports that are needed.\n","import shelve\n","\n","\n","# Write custom exception handlers\n","class NegativeAmountError(Exception):\n","    \"\"\"Exception raised for attempting to deposit or withdraw a negative amount.\"\"\"\n","    def __init__(self, message=\"Amount cannot be negative.\"):\n","        self.message = message\n","        super().__init__(self.message)\n","\n","class InsufficientFundsError(Exception):\n","    \"\"\"Exception raised for attempting to withdraw more than the available balance.\"\"\"\n","    def __init__(self, message=\"Insufficient funds for withdrawal.\"):\n","        self.message = message\n","        super().__init__(self.message)\n","\n","\n","# Base BankAccount Class\n","class BankAccount:\n","    #contents of BankAccount class. Initializer, deposit, withdraw, checkbalance, __str__\n","    def __init__(self, owner_name, balance=0): #default balance is 0\n","      self.owner_name=owner_name\n","      self.balance=balance\n","\n","    def deposit(self,dep_amount):\n","      try:\n","        if dep_amount<0:\n","          raise NegativeAmountError(\"Amount cannot be negative!\")\n","        self.balance+=dep_amount\n","        print(f'Deposit amount: ${dep_amount}. New Balance: ${self.balance}')\n","      except NegativeAmountError as e:\n","        print(f\"Error: {e}\")\n","\n","\n","    def withdraw(self):\n","      \"\"\"Does nothing. Will be overridden in subclasses.\"\"\"\n","      pass\n","\n","\n","    def checkbalance(self):\n","      print(f'Current account balance is ${self.balance}.')\n","\n","\n","    def __str__():\n","      print(f'Account owner is {self.owner_name}. Account Balance: ${self.balance} ')\n","\n","\n","\n","\n","\n","# SavingAccount Class (inherits from BankAccount)\n","class SavingsAccount(BankAccount): # Inheriting from BankAccount\n","\n","    def __init__(self, owner_name, balance=0):\n","      super().__init__(owner_name, balance) #super() calls init from BankAccount\n","\n","#Saving and Checking account classes should overwrite the Withdraw Money method to handle them differently with $1 and $2 fees respectively.\n","\n","    def withdraw(self, amount): #amount is the withdrawl amount\n","      fee=1\n","      total_withdraw=amount+fee\n","\n","      try:\n","        if amount<0:\n","          raise NegativeAmountError(\"Amount cannot be negative!\")\n","        if total_withdraw > self.balance:\n","          raise InsufficientFundsError('Insufficient funds for withdrawal')\n","\n","        self.balance-=total_withdraw\n","        print(f\"Withdrawal amount ${amount}, ${fee} fee applied. Current Balance: ${self.balance}\")\n","\n","      except(NegativeAmountError,InsufficientFundsError) as e:\n","        print(f\"Error: {e}\")\n","\n","\n","# CheckingAccount Class (inherits from BankAccount)\n","\n","class CheckingAccount(BankAccount): #Inheriting from BankAccount\n","    def __init__(self,owner_name,balance=0):\n","      super().__init__(owner_name,balance)\n","\n","\n","    def withdraw(self, amount):\n","      fee=2\n","      total_withdraw=amount+fee\n","      try:\n","        if amount<0:\n","          raise NegativeAmountError(\"Amount cannot be negative!\")\n","        if total_withdraw>self.balance:\n","           raise InsufficientFundsError(\"Insufficient funds for withdrawal.\")\n","\n","        self.balance-=total_withdraw\n","        print(f\"Withdrawl amount ${amount}, ${fee} fee applied. Current Balance: ${self.balance}\")\n","\n","      except (NegativeAmountError, InsufficientFundsError) as e:\n","        print(f\"Error: {e}\")\n","\n","\n","# Function to save accounts data to a file\n","def save_accounts_to_file(accounts):\n","    # Implement function to save accounts to a file using shelve or pickle\n","  try:\n","    with shelve.open('accounts_data') as acc_shelve:\n","      for account in accounts:\n","        acc_shelve[account.owner_name] = account\n","    print(\"Account data saved successfully.\")\n","  except IOError as e:\n","      print(f\"Error saving account data: {e}\")\n","\n","\n","# Function to load accounts data from a file\n","def load_accounts_from_file():\n","    # Implement function to load accounts from a file\n","    accounts = []\n","    try:\n","        with shelve.open('accounts_data') as acc_shelve:\n","            for owner_name in acc_shelve:\n","                accounts.append(acc_shelve[owner_name])\n","        print(\"Account data loaded successfully.\")\n","    except IOError as e:\n","        print(f\"Error loading account data: {e}\")\n","    return accounts\n","\n","\n","# Main function to interact with the banking system\n","def main():\n","    accounts = [] #list\n","    # make required calls and edits.\n","\n","    while True:\n","        print(\"\\nOptions:\")\n","        print(\"1. Create a new account\")\n","        print(\"2. Deposit money\")\n","        print(\"3. Withdraw money\")\n","        print(\"4. Check balance\")\n","        print(\"5. Save account data\")\n","        print(\"6. Load account data\")\n","        print(\"7. Exit\")\n","\n","        choice = input(\"Enter your choice: \")\n","\n","        if choice == '1':\n","          print('Hi! Thanks for choosing to create your account!')\n","          owner_name=input('Enter account owners name: ').lower()\n","          account_type=input('Enter account type (Checking/Savings): ').lower()\n","          balance=float(input('Enter initial balance: '))\n","\n","          if(account_type=='savings'): #if user selected savings account\n","            new_account = SavingsAccount(owner_name, balance)  # Create a new SavingsAccount\n","            accounts.append(new_account)\n","            print(f\"New SavingsAccount created for {owner_name} with balance ${balance}\")\n","\n","          elif(account_type=='checking'):\n","            new_account = CheckingAccount(owner_name, balance)\n","            accounts.append(new_account)\n","            print(f\"New CheckingAccount created for {owner_name} with balance ${balance}\")\n","\n","          else:\n","            print(\"Invalid selection, please enter 'Checking' or 'Savings' .\")\n","\n","\n","        elif choice == '2':\n","          owner_name=input('Enter the owner name for the account you would like to deposit to: ').lower()\n","          account_found=False\n","          for account in accounts:\n","            if account.owner_name==owner_name:\n","              dep_amount=float(input('Enter the amount you would like to deposit: '))\n","              account.deposit(dep_amount)\n","              account_found=True\n","              break\n","          if not account_found:\n","            print(f'Account with name {owner_name} does not exist')\n","\n","\n","        elif choice == '3':\n","          owner_name=input('Enter the owner name for the account you would like to withdraw money for: ').lower()\n","          account_found=False\n","          for account in accounts:\n","            if account.owner_name == owner_name:\n","              withdraw_amount = float(input('Enter the withdrawal amount: '))\n","              account.withdraw(withdraw_amount)\n","              account_found=True\n","              break\n","          if not account_found:\n","            print(f\"Account with name {owner_name} does not exist.\")\n","\n","\n","        elif choice == '4':\n","          owner_name=input('Enter the owner name for the account you would like to check balance for: ').lower()\n","          account_found=False\n","          for account in accounts:\n","            if account.owner_name == owner_name:\n","              account.checkbalance()\n","              account_found=True\n","              break\n","          if not account_found:\n","            print(f\"Account with name {owner_name} does not exist.\")\n","\n","\n","        elif choice == '5':\n","          save_accounts_to_file(accounts)\n","\n","\n","        elif choice == '6':\n","          accounts = load_accounts_from_file()\n","\n","\n","        elif choice == '7':\n","            print(\"Exiting...\")\n","            break\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"heyLEb08-pTW","outputId":"28a7c5af-0268-487d-a1e4-494e2f0c038d","executionInfo":{"status":"ok","timestamp":1740889662950,"user_tz":480,"elapsed":34584,"user":{"displayName":"Samriddhi Matharu","userId":"15444417249591811102"}}},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Options:\n","1. Create a new account\n","2. Deposit money\n","3. Withdraw money\n","4. Check balance\n","5. Save account data\n","6. Load account data\n","7. Exit\n","Enter your choice: 1\n","Hi! Thanks for choosing to create your account!\n","Enter account owners name: sam\n","Enter account type (Checking/Savings): savings\n","Enter initial balance: 50\n","New SavingsAccount created for sam with balance $50.0\n","\n","Options:\n","1. Create a new account\n","2. Deposit money\n","3. Withdraw money\n","4. Check balance\n","5. Save account data\n","6. Load account data\n","7. Exit\n","Enter your choice: 4\n","Enter the owner name for the account you would like to check balance for: sam\n","Current account balance is $50.0.\n","\n","Options:\n","1. Create a new account\n","2. Deposit money\n","3. Withdraw money\n","4. Check balance\n","5. Save account data\n","6. Load account data\n","7. Exit\n","Enter your choice: 5\n","Account data saved successfully.\n","\n","Options:\n","1. Create a new account\n","2. Deposit money\n","3. Withdraw money\n","4. Check balance\n","5. Save account data\n","6. Load account data\n","7. Exit\n","Enter your choice: 6\n","Account data loaded successfully.\n","\n","Options:\n","1. Create a new account\n","2. Deposit money\n","3. Withdraw money\n","4. Check balance\n","5. Save account data\n","6. Load account data\n","7. Exit\n","Enter your choice: 7\n","Exiting...\n"]}]}]}